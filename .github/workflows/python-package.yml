name: Python package

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install poetry

      - name: Cache Poetry virtual environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      - name: Lint (flake8)
        run: poetry run flake8 datasafari tests

      - name: Run tests with coverage (pytest)
        run: poetry run pytest --cov=datasafari --cov-report=xml

      - name: Build the package
        run: poetry build

      - name: Check the package (Twine)
        run: poetry run twine check dist/*

      - name: Static security scan (Bandit)
        run: poetry run bandit -c pyproject.toml -r .

      - name: Scan for dependency vulnerabilities (SafetyCLI 3)
        uses: pyupio/safety-action@v1.0.0
        with:
          api-key: ${{ secrets.SAFETY_CLI_API_KEY }}

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DS_SERVER_SSH_PRIVATE_KEY }}

      - name: Add SSH key to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DS_SERVER_HOST_KEY_RSA }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.DS_SERVER_HOST_KEY_ECDSA }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.DS_SERVER_HOST_KEY_ED25519 }}" >> ~/.ssh/known_hosts

      - name: Sync documentation to server
        run: rsync -avz --delete -e "ssh -p ${{ secrets.DS_SERVER_SSH_PORT }}" --verbose ./docs/_build/html/ ${{ secrets.DS_SERVER_USERNAME }}@${{ secrets.DS_SERVER_IP }}:${{ secrets.DS_SERVER_DOCS_PATH }}
        env:
          RSYNC_RSH: ssh -o StrictHostKeyChecking=accept-new

      - name: Determine Bump Type
        id: bump_type
        run: |
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [[ $TAG == *"-patch" ]]; then
            echo "::set-output name=bump_type::patch"
          elif [[ $TAG == *"-minor" ]]; then
            echo "::set-output name=bump_type::minor"
          elif [[ $TAG == *"-major" ]]; then
            echo "::set-output name=bump_type::major"
          else
            echo "::set-output name=bump_type::patch" # Default to patch if no specific tag
          fi

      - name: Bump Version
        run: bumpversion --config-file .bumpversion.cfg ${{ steps.bump_type.outputs.bump_type }}

      - name: Create Release Tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag v$(poetry version -s)
          git push origin --tags

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish --username $TWINE_USERNAME --password $TWINE_PASSWORD
